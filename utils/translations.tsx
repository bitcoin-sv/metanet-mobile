import React, { createContext, useContext, useState, ReactNode } from 'react';
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// Detect language with multiple fallback methods
let detectedLanguage = 'en';

try {
  // Try expo-localization first (most reliable for Expo apps)
  const Localization = require('expo-localization');
  const deviceLanguage = Localization.getLocales()?.[0]?.languageCode;
  if (deviceLanguage) {
    detectedLanguage = deviceLanguage;
    console.log('ЁЯМН Device language detected via expo-localization:', deviceLanguage);
    console.log('ЁЯФд Detected language code:', detectedLanguage);
    console.log('ЁЯУ▒ Full locale info:', Localization.getLocales()?.[0]);
  } else {
    throw new Error('expo-localization returned no language');
  }
} catch (localeError) {
  console.warn('тЪая╕П expo-localization not available, trying react-native-localize:', localeError.message);
  
  try {
    // Fallback to react-native-localize
    const { getLocales } = require('react-native-localize');
    const deviceLocales = getLocales();
    detectedLanguage = deviceLocales[0]?.languageCode || 'en';
    console.log('ЁЯМН Device locales detected via react-native-localize:', deviceLocales);
    console.log('ЁЯФд Detected language code:', detectedLanguage);
    console.log('ЁЯУ▒ Full locale info:', deviceLocales[0]);
  } catch (rnLocalizeError) {
    console.warn('тЪая╕П react-native-localize also not available:', rnLocalizeError.message);
    
    try {
      // Enhanced fallback to platform-specific detection
      const { Platform } = require('react-native');
    
    if (Platform.OS === 'ios') {
      console.log('ЁЯНО iOS detected, trying enhanced locale detection...');
      const { NativeModules } = require('react-native');
      
      // Try multiple iOS methods
      let iosLocale = null;
      
      // Method 1: SettingsManager AppleLocale
      if (NativeModules.SettingsManager?.settings?.AppleLocale) {
        iosLocale = NativeModules.SettingsManager.settings.AppleLocale;
        console.log('ЁЯНО iOS AppleLocale found:', iosLocale);
      }
      
      // Method 2: SettingsManager AppleLanguages array
      if (!iosLocale && NativeModules.SettingsManager?.settings?.AppleLanguages) {
        const languages = NativeModules.SettingsManager.settings.AppleLanguages;
        iosLocale = languages[0];
        console.log('ЁЯНО iOS AppleLanguages found:', languages, '-> using:', iosLocale);
      }
      
      // Method 3: I18nManager
      if (!iosLocale) {
        const { I18nManager } = require('react-native');
        if (I18nManager.localeIdentifier) {
          iosLocale = I18nManager.localeIdentifier;
          console.log('ЁЯНО iOS I18nManager localeIdentifier found:', iosLocale);
        }
      }
      
      if (iosLocale) {
        // Extract language code (handle both "es_ES" and "es-ES" formats)
        detectedLanguage = String(iosLocale).split(/[-_]/)[0];
        console.log('ЁЯФд iOS extracted language code:', detectedLanguage);
      } else {
        console.log('ЁЯНО No iOS locale found, using default: en');
      }
      
    } else if (Platform.OS === 'android') {
      console.log('ЁЯдЦ Android detected, trying locale detection...');
      const { I18nManager } = require('react-native');
      if (I18nManager.localeIdentifier) {
        detectedLanguage = I18nManager.localeIdentifier.split(/[-_]/)[0];
        console.log('ЁЯдЦ Android locale detected:', I18nManager.localeIdentifier, '-> extracted:', detectedLanguage);
      }
    } else {
      console.log('ЁЯМР Web/other platform detected...');
      // Web fallback
      if (typeof navigator !== 'undefined' && navigator.language) {
        detectedLanguage = navigator.language.split(/[-_]/)[0];
        console.log('ЁЯМР Web locale detected:', navigator.language, '-> extracted:', detectedLanguage);
      }
    }
    } catch (platformError) {
      console.warn('тЪая╕П Platform-specific locale detection failed:', platformError.message);
      detectedLanguage = 'en';
      console.log('ЁЯФз Using default language: en');
    }
  }
}

const resources = {
  en: {
    translation: {
      // Navigation
      search_placeholder: 'Search or enter site name',
      search_bookmarks: 'Search bookmarksтАж',
      search_results: 'Search Results',
      new_tab: 'New Tab',
      back: 'Back',
      forward: 'Forward',
      refresh: 'Refresh',
      share: 'Share',
      
      // Bookmarks
      bookmark: 'Bookmark',
      bookmarks: 'Bookmarks',
      add_bookmark: 'Add Bookmark',
      remove_bookmark: 'Remove Bookmark',
      delete_bookmark: 'Delete Bookmark',
      recent_bookmarks: 'Recent Bookmarks',
      no_bookmarks: 'No bookmarks yet',
      
      // History
      history: 'History',
      clear: 'Clear',
      
      // General UI
      untitled: 'Untitled',
      website_notification: 'Website Notification',
      
      // Apps & Homepage
      recent: 'Recent',
      recommended: 'Recommended',
      customize_homepage: 'Customize Homepage',
      customize_homepage_description: 'Show or hide sections on your homepage',
      show_bookmarks: 'Show Bookmarks',
      show_recent_apps: 'Show Recent Apps',
      show_recommended_apps: 'Show Recommended Apps',
      hide_app: 'Hide App',
      
      // Actions
      cancel: 'Cancel',
      done: 'Done',
      reset: 'Reset',
      ok: 'OK',
      yes: 'Yes',
      no: 'No',
      
      // Wallet
      balance: 'Balance',
      send: 'Send',
      receive: 'Receive',
      wallet: 'Wallet',
      identity: 'Identity',
      
      // Settings
      settings: 'Settings',
      theme: 'Theme',
      currency_format: 'Currency Format',
      language: 'Language',
      
      // Notifications
      notification_permission: 'Notification Permission',
      allow_notifications: 'Allow notifications from this site?',
      allow: 'Allow',
      block: 'Block',
      
      // Errors
      error_loading_page: 'Error loading page',
      no_internet: 'No internet connection',
      invalid_url: 'Invalid URL',
      something_went_wrong: 'Something went wrong',
      
      // States
      loading: 'Loading...',
      no_results: 'No results found',
      empty: 'Empty',
      
      // Units
      satoshis: 'satoshis',
      sats: 'sats',
    }
  },
  zh: {
    translation: {
      // Navigation
      search_placeholder: 'цРЬч┤вцИЦш╛УхЕеч╜СчлЩхРНчз░',
      search_bookmarks: 'цРЬч┤вф╣жчн╛тАж',
      new_tab: 'цЦ░цаЗчн╛щб╡',
      back: 'хРОщАА',
      forward: 'хЙНш┐Ы',
      refresh: 'хИ╖цЦ░',
      share: 'хИЖф║л',
      
      // Bookmarks
      bookmark: 'ф╣жчн╛',
      bookmarks: 'ф╣жчн╛',
      remove_bookmark: 'чз╗щЩдф╣жчн╛',
      delete_bookmark: 'хИащЩдф╣жчн╛',
      recent_bookmarks: 'цЬАш┐Сф╣жчн╛',
      no_bookmarks: 'цЪВцЧаф╣жчн╛',
      
      // History
      history: 'хОЖхП▓шо░х╜Х',
      clear: 'ц╕ЕщЩд',
      
      // General UI
      untitled: 'цЧацаЗщвШ',
      website_notification: 'ч╜СчлЩщАЪчЯе',
      
      // Apps & Homepage
      recent: 'цЬАш┐С',
      recommended: 'цОишНР',
      customize_homepage: 'шЗкхоЪф╣Йф╕╗щб╡',
      customize_homepage_description: 'цШ╛чд║цИЦщЪРшЧПф╕╗щб╡ф╕КчЪДщГихИЖ',
      show_bookmarks: 'цШ╛чд║ф╣жчн╛',
      show_recent_apps: 'цШ╛чд║цЬАш┐Сх║ФчФи',
      show_recommended_apps: 'цШ╛чд║цОишНРх║ФчФи',
      hide_app: 'щЪРшЧПх║ФчФи',
      
      // Actions
      cancel: 'хПЦц╢И',
      done: 'хоМцИР',
      reset: 'щЗНч╜о',
      ok: 'чбохоЪ',
      yes: 'цШп',
      no: 'хРж',
      
      // Wallet
      balance: 'ф╜ЩщвЭ',
      send: 'хПСщАБ',
      receive: 'цОецФ╢',
      wallet: 'щТ▒хМЕ',
      identity: 'ш║лф╗╜',
      
      // Settings
      settings: 'шо╛ч╜о',
      theme: 'ф╕╗щвШ',
      currency_format: 'ш┤зх╕Бца╝х╝П',
      language: 'шпншиА',
      
      // Notifications
      notification_permission: 'щАЪчЯецЭГщЩР',
      allow_notifications: 'хЕБшо╕цндч╜СчлЩхПСщАБщАЪчЯея╝Я',
      allow: 'хЕБшо╕',
      block: 'щШ╗цнв',
      
      // Errors
      error_loading_page: 'щб╡щЭвхКаш╜╜щФЩшпп',
      no_internet: 'цЧач╜Сч╗Ьш┐ЮцОе',
      invalid_url: 'цЧацХИч╜СхЭА',
      something_went_wrong: 'хЗ║чО░щФЩшпп',
      
      // States
      loading: 'хКаш╜╜ф╕н...',
      no_results: 'цЬкцЙ╛хИ░ч╗УцЮЬ',
      empty: 'чй║',
      
      // Units
      satoshis: 'шБк',
      sats: 'шБк',
    }
  },
  hi: {
    translation: {
      // Navigation
      search_placeholder: 'рдЦреЛрдЬреЗрдВ рдпрд╛ рд╕рд╛рдЗрдЯ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ',
      new_tab: 'рдирдпрд╛ рдЯреИрдм',
      back: 'рдкреАрдЫреЗ',
      forward: 'рдЖрдЧреЗ',
      refresh: 'рддрд╛рдЬрд╝рд╛ рдХрд░реЗрдВ',
      share: 'рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ',
      
      // Bookmarks
      bookmark: 'рдмреБрдХрдорд╛рд░реНрдХ',
      bookmarks: 'рдмреБрдХрдорд╛рд░реНрдХ',
      remove_bookmark: 'рдмреБрдХрдорд╛рд░реНрдХ рд╣рдЯрд╛рдПрдВ',
      delete_bookmark: 'рдмреБрдХрдорд╛рд░реНрдХ рдорд┐рдЯрд╛рдПрдВ',
      recent_bookmarks: 'рд╣рд╛рд▓ рдХреЗ рдмреБрдХрдорд╛рд░реНрдХ',
      no_bookmarks: 'рдЕрднреА рддрдХ рдХреЛрдИ рдмреБрдХрдорд╛рд░реНрдХ рдирд╣реАрдВ',
      
      // History
      history: 'рдЗрддрд┐рд╣рд╛рд╕',
      clear: 'рд╕рд╛рдлрд╝ рдХрд░реЗрдВ',
      
      // General UI
      untitled: 'рдмрд┐рдирд╛ рд╢реАрд░реНрд╖рдХ',
      website_notification: 'рд╡реЗрдмрд╕рд╛рдЗрдЯ рд╕реВрдЪрдирд╛',
      
      // Apps & Homepage
      recent: 'рд╣рд╛рд▓ рд╣реА рдореЗрдВ',
      recommended: 'рдЕрдиреБрд╢рдВрд╕рд┐рдд',
      customize_homepage: 'рд╣реЛрдордкреЗрдЬ рдХреЛ рдЕрдиреБрдХреВрд▓рд┐рдд рдХрд░реЗрдВ',
      customize_homepage_description: 'рдЕрдкрдиреЗ рд╣реЛрдордкреЗрдЬ рдкрд░ рд╕реЗрдХреНрд╢рди рджрд┐рдЦрд╛рдПрдВ рдпрд╛ рдЫреБрдкрд╛рдПрдВ',
      show_bookmarks: 'рдмреБрдХрдорд╛рд░реНрдХ рджрд┐рдЦрд╛рдПрдВ',
      show_recent_apps: 'рд╣рд╛рд▓ рдХреЗ рдРрдкреНрд╕ рджрд┐рдЦрд╛рдПрдВ',
      show_recommended_apps: 'рдЕрдиреБрд╢рдВрд╕рд┐рдд рдРрдкреНрд╕ рджрд┐рдЦрд╛рдПрдВ',
      hide_app: 'рдРрдк рдЫреБрдкрд╛рдПрдВ',
      
      // Actions
      cancel: 'рд░рджреНрдж рдХрд░реЗрдВ',
      done: 'рд╣реЛ рдЧрдпрд╛',
      reset: 'рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ',
      ok: 'рдареАрдХ рд╣реИ',
      yes: 'рд╣рд╛рдБ',
      no: 'рдирд╣реАрдВ',
      
      // Wallet
      balance: 'рд╢реЗрд╖ рд░рд╛рд╢рд┐',
      send: 'рднреЗрдЬреЗрдВ',
      receive: 'рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      wallet: 'рд╡реЙрд▓реЗрдЯ',
      identity: 'рдкрд╣рдЪрд╛рди',
      
      // Settings
      settings: 'рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
      theme: 'рдереАрдо',
      currency_format: 'рдореБрджреНрд░рд╛ рдкреНрд░рд╛рд░реВрдк',
      language: 'рднрд╛рд╖рд╛',
      
      // Notifications
      notification_permission: 'рдЕрдзрд┐рд╕реВрдЪрдирд╛ рдЕрдиреБрдорддрд┐',
      allow_notifications: 'рдЗрд╕ рд╕рд╛рдЗрдЯ рд╕реЗ рдЕрдзрд┐рд╕реВрдЪрдирд╛рдУрдВ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ?',
      allow: 'рдЕрдиреБрдорддрд┐ рджреЗрдВ',
      block: 'рдмреНрд▓реЙрдХ рдХрд░реЗрдВ',
      
      // Errors
      error_loading_page: 'рдкреЗрдЬ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐',
      no_internet: 'рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдирд╣реАрдВ',
      invalid_url: 'рдЕрдорд╛рдиреНрдп URL',
      something_went_wrong: 'рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖ',
      
      // States
      loading: 'рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
      no_results: 'рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛',
      empty: 'рдЦрд╛рд▓реА',
      
      // Units
      satoshis: 'рд╕рд╛рддреЛрд╢реА',
      sats: 'рд╕реИрдЯреНрд╕',
    }
  },
  es: {
    translation: {
      // Navigation
      search_placeholder: 'Buscar o ingresar nombre del sitio',
      new_tab: 'Nueva Pesta├▒a',
      back: 'Atr├бs',
      forward: 'Adelante',
      refresh: 'Actualizar',
      share: 'Compartir',
      
      // Bookmarks
      bookmark: 'Marcador',
      bookmarks: 'Marcadores',
      remove_bookmark: 'Eliminar Marcador',
      delete_bookmark: 'Eliminar Marcador',
      recent_bookmarks: 'Marcadores Recientes',
      no_bookmarks: 'No hay marcadores a├║n',
      
      // History
      history: 'Historial',
      clear: 'Limpiar',
      
      // General UI
      untitled: 'Sin t├нtulo',
      website_notification: 'Notificaci├│n del sitio web',
      
      // Apps & Homepage
      recent: 'Reciente',
      recommended: 'Recomendado',
      customize_homepage: 'Personalizar P├бgina de Inicio',
      customize_homepage_description: 'Mostrar u ocultar secciones en tu p├бgina de inicio',
      show_bookmarks: 'Mostrar Marcadores',
      show_recent_apps: 'Mostrar Apps Recientes',
      show_recommended_apps: 'Mostrar Apps Recomendadas',
      hide_app: 'Ocultar App',
      
      // Actions
      cancel: 'Cancelar',
      done: 'Hecho',
      reset: 'Restablecer',
      ok: 'OK',
      yes: 'S├н',
      no: 'No',
      
      // Wallet
      balance: 'Saldo',
      send: 'Enviar',
      receive: 'Recibir',
      wallet: 'Billetera',
      identity: 'Identidad',
      
      // Settings
      settings: 'Configuraci├│n',
      theme: 'Tema',
      currency_format: 'Formato de Moneda',
      language: 'Idioma',
      
      // Notifications
      notification_permission: 'Permiso de Notificaci├│n',
      allow_notifications: '┬┐Permitir notificaciones de este sitio?',
      allow: 'Permitir',
      block: 'Bloquear',
      
      // Errors
      error_loading_page: 'Error al cargar la p├бgina',
      no_internet: 'Sin conexi├│n a internet',
      invalid_url: 'URL inv├бlida',
      something_went_wrong: 'Algo sali├│ mal',
      
      // States
      loading: 'Cargando...',
      no_results: 'No se encontraron resultados',
      empty: 'Vac├нo',
      
      // Units
      satoshis: 'satoshis',
      sats: 'sats',
    }
  },
  fr: {
    translation: {
      // Navigation
      search_placeholder: 'Rechercher ou saisir le nom du site',
      new_tab: 'Nouvel Onglet',
      back: 'Retour',
      forward: 'Suivant',
      refresh: 'Actualiser',
      share: 'Partager',
      
      // Bookmarks
      bookmark: 'Signet',
      bookmarks: 'Signets',
      remove_bookmark: 'Supprimer le Signet',
      delete_bookmark: 'Effacer le Signet',
      recent_bookmarks: 'Signets R├йcents',
      no_bookmarks: 'Aucun signet pour le moment',
      
      // History
      history: 'Historique',
      clear: 'Effacer',
      
      // General UI
      untitled: 'Sans titre',
      website_notification: 'Notification du site web',
      
      // Apps & Homepage
      recent: 'R├йcent',
      recommended: 'Recommand├й',
      customize_homepage: 'Personnaliser la Page d\'Accueil',
      customize_homepage_description: 'Afficher ou masquer les sections sur votre page d\'accueil',
      show_bookmarks: 'Afficher les Signets',
      show_recent_apps: 'Afficher les Apps R├йcentes',
      show_recommended_apps: 'Afficher les Apps Recommand├йes',
      hide_app: 'Masquer l\'App',
      
      // Actions
      cancel: 'Annuler',
      done: 'Termin├й',
      reset: 'R├йinitialiser',
      ok: 'OK',
      yes: 'Oui',
      no: 'Non',
      
      // Wallet
      balance: 'Solde',
      send: 'Envoyer',
      receive: 'Recevoir',
      wallet: 'Portefeuille',
      identity: 'Identit├й',
      
      // Settings
      settings: 'Param├иtres',
      theme: 'Th├иme',
      currency_format: 'Format de Devise',
      language: 'Langue',
      
      // Notifications
      notification_permission: 'Autorisation de Notification',
      allow_notifications: 'Autoriser les notifications de ce site ?',
      allow: 'Autoriser',
      block: 'Bloquer',
      
      // Errors
      error_loading_page: 'Erreur de chargement de la page',
      no_internet: 'Pas de connexion internet',
      invalid_url: 'URL invalide',
      something_went_wrong: 'Une erreur s\'est produite',
      
      // States
      loading: 'Chargement...',
      no_results: 'Aucun r├йsultat trouv├й',
      empty: 'Vide',
      
      // Units
      satoshis: 'satoshis',
      sats: 'sats',
    }
  },
  ar: {
    translation: {
      // Navigation
      search_placeholder: '╪з╪и╪н╪л ╪г┘И ╪г╪п╪о┘Д ╪з╪│┘Е ╪з┘Д┘Е┘И┘В╪╣',
      new_tab: '╪╣┘Д╪з┘Е╪й ╪к╪и┘И┘К╪и ╪м╪п┘К╪п╪й',
      back: '╪▒╪м┘И╪╣',
      forward: '╪з┘Д╪к╪з┘Д┘К',
      refresh: '╪к╪н╪п┘К╪л',
      share: '┘Е╪┤╪з╪▒┘Г╪й',
      
      // Bookmarks
      bookmark: '╪е╪┤╪з╪▒╪й ┘Е╪▒╪м╪╣┘К╪й',
      bookmarks: '╪з┘Д╪е╪┤╪з╪▒╪з╪к ╪з┘Д┘Е╪▒╪м╪╣┘К╪й',
      remove_bookmark: '╪е╪▓╪з┘Д╪й ╪з┘Д╪е╪┤╪з╪▒╪й ╪з┘Д┘Е╪▒╪м╪╣┘К╪й',
      delete_bookmark: '╪н╪░┘Б ╪з┘Д╪е╪┤╪з╪▒╪й ╪з┘Д┘Е╪▒╪м╪╣┘К╪й',
      recent_bookmarks: '╪з┘Д╪е╪┤╪з╪▒╪з╪к ╪з┘Д┘Е╪▒╪м╪╣┘К╪й ╪з┘Д╪н╪п┘К╪л╪й',
      no_bookmarks: '┘Д╪з ╪к┘И╪м╪п ╪е╪┤╪з╪▒╪з╪к ┘Е╪▒╪м╪╣┘К╪й ╪и╪╣╪п',
      
      // History
      history: '╪з┘Д╪к╪з╪▒┘К╪о',
      clear: '┘Е╪│╪н',
      
      // General UI
      untitled: '╪и╪п┘И┘Ж ╪╣┘Ж┘И╪з┘Ж',
      website_notification: '╪е╪┤╪╣╪з╪▒ ╪з┘Д┘Е┘И┘В╪╣',
      
      // Apps & Homepage
      recent: '╪н╪п┘К╪л',
      recommended: '┘Е┘И╪╡┘Й ╪и┘З',
      customize_homepage: '╪к╪о╪╡┘К╪╡ ╪з┘Д╪╡┘Б╪н╪й ╪з┘Д╪▒╪ж┘К╪│┘К╪й',
      customize_homepage_description: '╪е╪╕┘З╪з╪▒ ╪г┘И ╪е╪о┘Б╪з╪б ╪з┘Д╪г┘В╪│╪з┘Е ┘Б┘К ╪╡┘Б╪н╪к┘Г ╪з┘Д╪▒╪ж┘К╪│┘К╪й',
      show_bookmarks: '╪е╪╕┘З╪з╪▒ ╪з┘Д╪е╪┤╪з╪▒╪з╪к ╪з┘Д┘Е╪▒╪м╪╣┘К╪й',
      show_recent_apps: '╪е╪╕┘З╪з╪▒ ╪з┘Д╪к╪╖╪и┘К┘В╪з╪к ╪з┘Д╪н╪п┘К╪л╪й',
      show_recommended_apps: '╪е╪╕┘З╪з╪▒ ╪з┘Д╪к╪╖╪и┘К┘В╪з╪к ╪з┘Д┘Е┘И╪╡┘Й ╪и┘З╪з',
      hide_app: '╪е╪о┘Б╪з╪б ╪з┘Д╪к╪╖╪и┘К┘В',
      
      // Actions
      cancel: '╪е┘Д╪║╪з╪б',
      done: '╪к┘Е',
      reset: '╪е╪╣╪з╪п╪й ╪к╪╣┘К┘К┘Ж',
      ok: '┘Е┘И╪з┘Б┘В',
      yes: '┘Ж╪╣┘Е',
      no: '┘Д╪з',
      
      // Wallet
      balance: '╪з┘Д╪▒╪╡┘К╪п',
      send: '╪е╪▒╪│╪з┘Д',
      receive: '╪з╪│╪к┘В╪и╪з┘Д',
      wallet: '┘Е╪н┘Б╪╕╪й',
      identity: '╪з┘Д┘З┘И┘К╪й',
      
      // Settings
      settings: '╪з┘Д╪е╪╣╪п╪з╪п╪з╪к',
      theme: '╪з┘Д┘Е╪╕┘З╪▒',
      currency_format: '╪к┘Ж╪│┘К┘В ╪з┘Д╪╣┘Е┘Д╪й',
      language: '╪з┘Д┘Д╪║╪й',
      
      // Notifications
      notification_permission: '╪е╪░┘Ж ╪з┘Д╪е╪┤╪╣╪з╪▒╪з╪к',
      allow_notifications: '╪з┘Д╪│┘Е╪з╪н ╪и╪з┘Д╪е╪┤╪╣╪з╪▒╪з╪к ┘Е┘Ж ┘З╪░╪з ╪з┘Д┘Е┘И┘В╪╣╪Я',
      allow: '╪з┘Д╪│┘Е╪з╪н',
      block: '╪н╪╕╪▒',
      
      // Errors
      error_loading_page: '╪о╪╖╪г ┘Б┘К ╪к╪н┘Е┘К┘Д ╪з┘Д╪╡┘Б╪н╪й',
      no_internet: '┘Д╪з ┘К┘И╪м╪п ╪з╪к╪╡╪з┘Д ╪и╪з┘Д╪е┘Ж╪к╪▒┘Ж╪к',
      invalid_url: '╪▒╪з╪и╪╖ ╪║┘К╪▒ ╪╡╪н┘К╪н',
      something_went_wrong: '╪н╪п╪л ╪о╪╖╪г ┘Е╪з',
      
      // States
      loading: '╪м╪з╪▒┘К ╪з┘Д╪к╪н┘Е┘К┘Д...',
      no_results: '┘Д┘Е ┘К╪к┘Е ╪з┘Д╪╣╪л┘И╪▒ ╪╣┘Д┘Й ┘Ж╪к╪з╪ж╪м',
      empty: '┘Б╪з╪▒╪║',
      
      // Units
      satoshis: '╪│╪з╪к┘И╪┤┘К',
      sats: '╪│╪з╪к╪│',
    }
  },
  pt: {
    translation: {
      // Navigation
      search_placeholder: 'Pesquisar ou digitar nome do site',
      new_tab: 'Nova Aba',
      back: 'Voltar',
      forward: 'Avan├зar',
      refresh: 'Atualizar',
      share: 'Compartilhar',
      
      // Bookmarks
      bookmark: 'Favorito',
      bookmarks: 'Favoritos',
      remove_bookmark: 'Remover Favorito',
      delete_bookmark: 'Excluir Favorito',
      recent_bookmarks: 'Favoritos Recentes',
      no_bookmarks: 'Nenhum favorito ainda',
      
      // History
      history: 'Hist├│rico',
      clear: 'Limpar',
      
      // General UI
      untitled: 'Sem t├нtulo',
      website_notification: 'Notifica├з├гo do site',
      
      // Apps & Homepage
      recent: 'Recente',
      recommended: 'Recomendado',
      customize_homepage: 'Personalizar P├бgina Inicial',
      customize_homepage_description: 'Mostrar ou ocultar se├з├╡es na sua p├бgina inicial',
      show_bookmarks: 'Mostrar Favoritos',
      show_recent_apps: 'Mostrar Apps Recentes',
      show_recommended_apps: 'Mostrar Apps Recomendados',
      hide_app: 'Ocultar App',
      
      // Actions
      cancel: 'Cancelar',
      done: 'Conclu├нdo',
      reset: 'Redefinir',
      ok: 'OK',
      yes: 'Sim',
      no: 'N├гo',
      
      // Wallet
      balance: 'Saldo',
      send: 'Enviar',
      receive: 'Receber',
      wallet: 'Carteira',
      identity: 'Identidade',
      
      // Settings
      settings: 'Configura├з├╡es',
      theme: 'Tema',
      currency_format: 'Formato de Moeda',
      language: 'Idioma',
      
      // Notifications
      notification_permission: 'Permiss├гo de Notifica├з├гo',
      allow_notifications: 'Permitir notifica├з├╡es deste site?',
      allow: 'Permitir',
      block: 'Bloquear',
      
      // Errors
      error_loading_page: 'Erro ao carregar p├бgina',
      no_internet: 'Sem conex├гo com a internet',
      invalid_url: 'URL inv├бlida',
      something_went_wrong: 'Algo deu errado',
      
      // States
      loading: 'Carregando...',
      no_results: 'Nenhum resultado encontrado',
      empty: 'Vazio',
      
      // Units
      satoshis: 'satoshis',
      sats: 'sats',
    }
  },
  bn: {
    translation: {
      // Navigation
      search_placeholder: 'ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи ржмрж╛ рж╕рж╛ржЗржЯрзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи',
      new_tab: 'ржирждрзБржи ржЯрзНржпрж╛ржм',
      back: 'ржкрзЗржЫржирзЗ',
      forward: 'рж╕рж╛ржоржирзЗ',
      refresh: 'рж░рж┐ржлрзНрж░рзЗрж╢',
      share: 'рж╢рзЗржпрж╝рж╛рж░',
      
      // Bookmarks
      bookmark: 'ржмрзБржХржорж╛рж░рзНржХ',
      bookmarks: 'ржмрзБржХржорж╛рж░рзНржХрж╕ржорзВрж╣',
      remove_bookmark: 'ржмрзБржХржорж╛рж░рзНржХ рж╕рж░рж╛ржи',
      delete_bookmark: 'ржмрзБржХржорж╛рж░рзНржХ ржорзБржЫрзБржи',
      recent_bookmarks: 'рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ ржмрзБржХржорж╛рж░рзНржХ',
      no_bookmarks: 'ржПржЦржиржУ ржХрзЛржи ржмрзБржХржорж╛рж░рзНржХ ржирзЗржЗ',
      
      // History
      history: 'ржЗрждрж┐рж╣рж╛рж╕',
      clear: 'ржкрж░рж┐рж╖рзНржХрж╛рж░',
      
      // General UI
      untitled: 'рж╢рж┐рж░рзЛржирж╛ржорж╣рзАржи',
      website_notification: 'ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржмрж┐ржЬрзНржЮржкрзНрждрж┐',
      
      // Apps & Homepage
      recent: 'рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ',
      recommended: 'ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд',
      customize_homepage: 'рж╣рзЛржоржкрзЗржЬ ржХрж╛рж╕рзНржЯржорж╛ржЗржЬ ржХрж░рзБржи',
      show_bookmarks: 'ржмрзБржХржорж╛рж░рзНржХ ржжрзЗржЦрж╛ржи',
      show_recent_apps: 'рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ ржЕрзНржпрж╛ржкрж╕ ржжрзЗржЦрж╛ржи',
      show_recommended_apps: 'ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржЕрзНржпрж╛ржкрж╕ ржжрзЗржЦрж╛ржи',
      hide_app: 'ржЕрзНржпрж╛ржк рж▓рзБржХрж╛ржи',
      
      // Actions
      cancel: 'ржмрж╛рждрж┐рж▓',
      done: 'рж╕ржорзНржкржирзНржи',
      reset: 'рж░рж┐рж╕рзЗржЯ',
      ok: 'ржарж┐ржХ ржЖржЫрзЗ',
      yes: 'рж╣рзНржпрж╛ржБ',
      no: 'ржирж╛',
      
      // Wallet
      balance: 'ржмрзНржпрж╛рж▓рзЗржирзНрж╕',
      send: 'ржкрж╛ржарж╛ржи',
      receive: 'ржЧрзНрж░рж╣ржг ржХрж░рзБржи',
      wallet: 'ржУржпрж╝рж╛рж▓рзЗржЯ',
      identity: 'ржкрж░рж┐ржЪржпрж╝',
      
      // Settings
      settings: 'рж╕рзЗржЯрж┐ржВрж╕',
      theme: 'ржерж┐ржо',
      currency_format: 'ржорзБржжрзНрж░рж╛рж░ ржлрж░ржорзНржпрж╛ржЯ',
      language: 'ржнрж╛рж╖рж╛',
      
      // Notifications
      notification_permission: 'ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржЕржирзБржорждрж┐',
      allow_notifications: 'ржПржЗ рж╕рж╛ржЗржЯ ржерзЗржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржирзЗрж░ ржЕржирзБржорждрж┐ ржжрж┐ржи?',
      allow: 'ржЕржирзБржорждрж┐ ржжрж┐ржи',
      block: 'ржмрзНрж▓ржХ ржХрж░рзБржи',
      
      // Errors
      error_loading_page: 'ржкрзЗржЬ рж▓рзЛржб ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐',
      no_internet: 'ржЗржирзНржЯрж╛рж░ржирзЗржЯ рж╕ржВржпрзЛржЧ ржирзЗржЗ',
      invalid_url: 'ржЕржмрзИржз URL',
      something_went_wrong: 'ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ',
      
      // States
      loading: 'рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
      no_results: 'ржХрзЛржи ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐',
      empty: 'ржЦрж╛рж▓рж┐',
      
      // Units
      satoshis: 'рж╕рж╛рждрзЛрж╢рж┐',
      sats: 'рж╕рзНржпрж╛ржЯрж╕',
    }
  },
  ru: {
    translation: {
      // Navigation
      search_placeholder: '╨Я╨╛╨╕╤Б╨║ ╨╕╨╗╨╕ ╨▓╨▓╨╛╨┤ ╨╜╨░╨╖╨▓╨░╨╜╨╕╤П ╤Б╨░╨╣╤В╨░',
      new_tab: '╨Э╨╛╨▓╨░╤П ╨Т╨║╨╗╨░╨┤╨║╨░',
      back: '╨Э╨░╨╖╨░╨┤',
      forward: '╨Т╨┐╨╡╤А╨╡╨┤',
      refresh: '╨Ю╨▒╨╜╨╛╨▓╨╕╤В╤М',
      share: '╨Я╨╛╨┤╨╡╨╗╨╕╤В╤М╤Б╤П',
      
      // Bookmarks
      bookmark: '╨Ч╨░╨║╨╗╨░╨┤╨║╨░',
      bookmarks: '╨Ч╨░╨║╨╗╨░╨┤╨║╨╕',
      remove_bookmark: '╨г╨┤╨░╨╗╨╕╤В╤М ╨Ч╨░╨║╨╗╨░╨┤╨║╤Г',
      delete_bookmark: '╨г╨┤╨░╨╗╨╕╤В╤М ╨Ч╨░╨║╨╗╨░╨┤╨║╤Г',
      recent_bookmarks: '╨Э╨╡╨┤╨░╨▓╨╜╨╕╨╡ ╨Ч╨░╨║╨╗╨░╨┤╨║╨╕',
      no_bookmarks: '╨Я╨╛╨║╨░ ╨╜╨╡╤В ╨╖╨░╨║╨╗╨░╨┤╨╛╨║',
      
      // History
      history: '╨Ш╤Б╤В╨╛╤А╨╕╤П',
      clear: '╨Ю╤З╨╕╤Б╤В╨╕╤В╤М',
      
      // General UI
      untitled: '╨С╨╡╨╖ ╨╜╨░╨╖╨▓╨░╨╜╨╕╤П',
      website_notification: '╨г╨▓╨╡╨┤╨╛╨╝╨╗╨╡╨╜╨╕╨╡ ╤Б╨░╨╣╤В╨░',
      
      // Apps & Homepage
      recent: '╨Э╨╡╨┤╨░╨▓╨╜╨╕╨╡',
      recommended: '╨а╨╡╨║╨╛╨╝╨╡╨╜╨┤╤Г╨╡╨╝╤Л╨╡',
      customize_homepage: '╨Э╨░╤Б╤В╤А╨╛╨╕╤В╤М ╨У╨╗╨░╨▓╨╜╤Г╤О ╨б╤В╤А╨░╨╜╨╕╤Ж╤Г',
      show_bookmarks: '╨Я╨╛╨║╨░╨╖╨░╤В╤М ╨Ч╨░╨║╨╗╨░╨┤╨║╨╕',
      show_recent_apps: '╨Я╨╛╨║╨░╨╖╨░╤В╤М ╨Э╨╡╨┤╨░╨▓╨╜╨╕╨╡ ╨Я╤А╨╕╨╗╨╛╨╢╨╡╨╜╨╕╤П',
      show_recommended_apps: '╨Я╨╛╨║╨░╨╖╨░╤В╤М ╨а╨╡╨║╨╛╨╝╨╡╨╜╨┤╤Г╨╡╨╝╤Л╨╡ ╨Я╤А╨╕╨╗╨╛╨╢╨╡╨╜╨╕╤П',
      hide_app: '╨б╨║╤А╤Л╤В╤М ╨Я╤А╨╕╨╗╨╛╨╢╨╡╨╜╨╕╨╡',
      
      // Actions
      cancel: '╨Ю╤В╨╝╨╡╨╜╨░',
      done: '╨У╨╛╤В╨╛╨▓╨╛',
      reset: '╨б╨▒╤А╨╛╤Б╨╕╤В╤М',
      ok: 'OK',
      yes: '╨Ф╨░',
      no: '╨Э╨╡╤В',
      
      // Wallet
      balance: '╨С╨░╨╗╨░╨╜╤Б',
      send: '╨Ю╤В╨┐╤А╨░╨▓╨╕╤В╤М',
      receive: '╨Я╨╛╨╗╤Г╤З╨╕╤В╤М',
      wallet: '╨Ъ╨╛╤И╨╡╨╗╨╡╨║',
      identity: '╨Ы╨╕╤З╨╜╨╛╤Б╤В╤М',
      
      // Settings
      settings: '╨Э╨░╤Б╤В╤А╨╛╨╣╨║╨╕',
      theme: '╨в╨╡╨╝╨░',
      currency_format: '╨д╨╛╤А╨╝╨░╤В ╨Т╨░╨╗╤О╤В╤Л',
      language: '╨п╨╖╤Л╨║',
      
      // Notifications
      notification_permission: '╨а╨░╨╖╤А╨╡╤И╨╡╨╜╨╕╨╡ ╨╜╨░ ╨г╨▓╨╡╨┤╨╛╨╝╨╗╨╡╨╜╨╕╤П',
      allow_notifications: '╨а╨░╨╖╤А╨╡╤И╨╕╤В╤М ╤Г╨▓╨╡╨┤╨╛╨╝╨╗╨╡╨╜╨╕╤П ╤Б ╤Н╤В╨╛╨│╨╛ ╤Б╨░╨╣╤В╨░?',
      allow: '╨а╨░╨╖╤А╨╡╤И╨╕╤В╤М',
      block: '╨Ч╨░╨▒╨╗╨╛╨║╨╕╤А╨╛╨▓╨░╤В╤М',
      
      // Errors
      error_loading_page: '╨Ю╤И╨╕╨▒╨║╨░ ╨╖╨░╨│╤А╤Г╨╖╨║╨╕ ╤Б╤В╤А╨░╨╜╨╕╤Ж╤Л',
      no_internet: '╨Э╨╡╤В ╨┐╨╛╨┤╨║╨╗╤О╤З╨╡╨╜╨╕╤П ╨║ ╨╕╨╜╤В╨╡╤А╨╜╨╡╤В╤Г',
      invalid_url: '╨Э╨╡╨▓╨╡╤А╨╜╤Л╨╣ URL',
      something_went_wrong: '╨з╤В╨╛-╤В╨╛ ╨┐╨╛╤И╨╗╨╛ ╨╜╨╡ ╤В╨░╨║',
      
      // States
      loading: '╨Ч╨░╨│╤А╤Г╨╖╨║╨░...',
      no_results: '╨а╨╡╨╖╤Г╨╗╤М╤В╨░╤В╤Л ╨╜╨╡ ╨╜╨░╨╣╨┤╨╡╨╜╤Л',
      empty: '╨Я╤Г╤Б╤В╨╛',
      
      // Units
      satoshis: '╤Б╨░╤В╨╛╤И╨╕',
      sats: '╤Б╨░╤В╤Б',
    }
  },
  id: {
    translation: {
      // Navigation
      search_placeholder: 'Cari atau masukkan nama situs',
      new_tab: 'Tab Baru',
      back: 'Kembali',
      forward: 'Maju',
      refresh: 'Segarkan',
      share: 'Bagikan',
      
      // Bookmarks
      bookmark: 'Bookmark',
      bookmarks: 'Bookmark',
      remove_bookmark: 'Hapus Bookmark',
      delete_bookmark: 'Hapus Bookmark',
      recent_bookmarks: 'Bookmark Terbaru',
      no_bookmarks: 'Belum ada bookmark',
      
      // History
      history: 'Riwayat',
      clear: 'Bersihkan',
      
      // General UI
      untitled: 'Tanpa judul',
      website_notification: 'Notifikasi situs web',
      
      // Apps & Homepage
      recent: 'Terbaru',
      recommended: 'Direkomendasikan',
      customize_homepage: 'Sesuaikan Beranda',
      show_bookmarks: 'Tampilkan Bookmark',
      show_recent_apps: 'Tampilkan Aplikasi Terbaru',
      show_recommended_apps: 'Tampilkan Aplikasi yang Direkomendasikan',
      hide_app: 'Sembunyikan Aplikasi',
      
      // Actions
      cancel: 'Batal',
      done: 'Selesai',
      reset: 'Atur Ulang',
      ok: 'OK',
      yes: 'Ya',
      no: 'Tidak',
      
      // Wallet
      balance: 'Saldo',
      send: 'Kirim',
      receive: 'Terima',
      wallet: 'Dompet',
      identity: 'Identitas',
      
      // Settings
      settings: 'Pengaturan',
      theme: 'Tema',
      currency_format: 'Format Mata Uang',
      language: 'Bahasa',
      
      // Notifications
      notification_permission: 'Izin Notifikasi',
      allow_notifications: 'Izinkan notifikasi dari situs ini?',
      allow: 'Izinkan',
      block: 'Blokir',
      
      // Errors
      error_loading_page: 'Error memuat halaman',
      no_internet: 'Tidak ada koneksi internet',
      invalid_url: 'URL tidak valid',
      something_went_wrong: 'Ada yang salah',
      
      // States
      loading: 'Memuat...',
      no_results: 'Tidak ada hasil ditemukan',
      empty: 'Kosong',
      
      // Units
      satoshis: 'satoshi',
      sats: 'sats',
    }
  }
};

// Define supported languages
const supportedLanguages = ['en', 'es', 'zh', 'hi', 'fr', 'ar', 'pt', 'bn', 'ru', 'id'];

// Validate and ensure we use a supported language
if (!supportedLanguages.includes(detectedLanguage)) {
  console.warn(`тЪая╕П Detected language "${detectedLanguage}" is not supported. Falling back to English.`);
  detectedLanguage = 'en';
}

console.log('ЁЯМН Final language to use:', detectedLanguage);
console.log('ЁЯУЛ Supported languages:', supportedLanguages);

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: detectedLanguage, // Use the validated detected language
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false,
    },
  })
  .then(() => {
    console.log('тЬЕ i18n initialized successfully');
    console.log('ЁЯМР Current language set to:', i18n.language);
    console.log('ЁЯУЛ Available languages:', Object.keys(resources));
    console.log('ЁЯОп Fallback language:', i18n.options.fallbackLng);
    
    // Test basic translation functionality
    const testKey = 'new_tab';
    const translation = i18n.t(testKey);
    console.log(`ЁЯзк Test translation for "${testKey}":`, translation);
    
    if (translation === testKey) {
      console.warn('тЪая╕П Translation not working - returned key instead of translated text');
    } else {
      console.log('тЬЕ Basic translation test passed');
    }
  })
  .catch((error) => {
    console.error('тЭМ i18n initialization failed:', error);
  });

interface LanguageContextType {
  currentLanguage: string;
  setCurrentLanguage: (language: string) => void;
}

const LanguageContext = createContext<LanguageContextType>({
  currentLanguage: 'en',
  setCurrentLanguage: () => {},
});

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState(i18n.language);
  
  console.log('ЁЯФД LanguageProvider initialized with language:', currentLanguage);
  
  const handleLanguageChange = (language: string) => {
    console.log('ЁЯФД Language changing from', currentLanguage, 'to', language);
    setCurrentLanguage(language);
    i18n.changeLanguage(language).then(() => {
      console.log('тЬЕ Language successfully changed to:', i18n.language);
    }).catch((error) => {
      console.error('тЭМ Failed to change language:', error);
    });
  };
  
  return (
    <LanguageContext.Provider value={{ currentLanguage, setCurrentLanguage: handleLanguageChange }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => useContext(LanguageContext);

export type TranslationKey = keyof typeof resources.en.translation;

// Test function to verify translations are working
export const testTranslations = () => {
  console.log('ЁЯзк Testing translations...');
  console.log('Current language:', i18n.language);
  console.log('Test translation (new_tab):', i18n.t('new_tab'));
  console.log('Test translation (bookmarks):', i18n.t('bookmarks'));
  console.log('Test translation (settings):', i18n.t('settings'));
  
  // Test if the translation exists
  const testKey = 'new_tab';
  const translation = i18n.t(testKey);
  if (translation === testKey) {
    console.warn('тЪая╕П Translation not found for key:', testKey);
  } else {
    console.log('тЬЕ Translation working correctly');
  }
};

// Advanced debug function to check language detection and translation state
export const debugLanguageDetection = () => {
  console.log('ЁЯФН === LANGUAGE DETECTION DEBUG ===');
  
  try {
    // Check expo-localization first
    const Localization = require('expo-localization');
    const locales = Localization.getLocales();
    console.log('ЁЯМН expo-localization locales:', locales);
    console.log('ЁЯФд expo-localization language code:', locales?.[0]?.languageCode);
  } catch (e) {
    console.log('тЪая╕П expo-localization not available:', e.message);
  }
  
  try {
    // Check react-native-localize
    const { getLocales } = require('react-native-localize');
    const locales = getLocales();
    console.log('ЁЯМН react-native-localize locales:', locales);
  } catch (e) {
    console.log('тЪая╕П react-native-localize not available');
  }
  
  try {
    // Check platform-specific settings
    const { Platform, NativeModules } = require('react-native');
    console.log('ЁЯУ▒ Platform:', Platform.OS);
    
    if (Platform.OS === 'ios') {
      console.log('ЁЯНО iOS SettingsManager:', NativeModules.SettingsManager?.settings);
      
      const { I18nManager } = require('react-native');
      console.log('ЁЯНО iOS I18nManager:', {
        localeIdentifier: I18nManager.localeIdentifier,
        isRTL: I18nManager.isRTL
      });
    }
  } catch (e) {
    console.log('тЪая╕П Platform detection failed:', e.message);
  }
  
  // Current i18n state
  console.log('ЁЯОп i18n current language:', i18n.language);
  console.log('ЁЯУЛ i18n available languages:', Object.keys(resources));
  console.log('ЁЯФЩ i18n fallback language:', i18n.options.fallbackLng);
  
  // Test translations in current language
  const testKeys = ['new_tab', 'bookmarks', 'settings', 'search_placeholder'];
  testKeys.forEach(key => {
    const translation = i18n.t(key);
    console.log(`ЁЯзк "${key}" -> "${translation}"`);
  });
  
  console.log('ЁЯФН === END DEBUG ===');
};

// Manual test function to force language change for debugging
export const forceLanguage = (language: string) => {
  console.log('ЁЯФз Manually forcing language change to:', language);
  return i18n.changeLanguage(language).then(() => {
    console.log('тЬЕ Language manually changed to:', i18n.language);
    // Test a few translations
    console.log('ЁЯзк Test "new_tab":', i18n.t('new_tab'));
    console.log('ЁЯзк Test "bookmarks":', i18n.t('bookmarks'));
    console.log('ЁЯзк Test "settings":', i18n.t('settings'));
    return i18n.language;
  }).catch((error) => {
    console.error('тЭМ Failed to manually change language:', error);
    throw error;
  });
};

// Global helper for quick Spanish test
(global as any).testSpanish = () => forceLanguage('es');
(global as any).testEnglish = () => forceLanguage('en');

export default i18n;
